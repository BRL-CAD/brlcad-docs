'\" t
.\"     Title: rtedge
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2021-09-13
.\"    Manual: BRL-CAD
.\"    Source: BRL-CAD
.\"  Language: English
.\"
.TH "RTEDGE" "1" "2021-09-13" "BRL\-CAD" "BRL\-CAD"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
rtedge \- ray\-traces a model, detects edges, and writes a BRL\-CAD color image (.pix) file
.SH "SYNOPSIS"
.sp
\fBrtedge\fP [\fIoptions\fP]... \fImodel.g\fP \fIobjects\fP... < \fImodel.pix\fP
.SH "DESCRIPTION"
.sp
\fBrtedge\fP operates on the indicated \fIobjects\fP in the input
\fImodel.g\fP and produces a BRL\-CAD .pix file that indicates the \(aqedges\(aq
in the model file. \fBrtedge\fP produces images by drawing a boundary
whenever a change in region_id is detected.  It also recognizes and
portrays abrupt changes in surface curvature and changes in surface
height.  This permits the recognition of pits, protrusions, and
changes in surface curvature.
.sp
The orientation of the rays to be fired may be specified by the
\fB\-a\fP and \fB\-e\fP options, in which case the model will be
autosized, and the grid will be centered on the centroid of the model,
with ray spacing chosen to span the entire set of
\fIobjects\fP. Alternatively, with the \fB\-M\fP option, a transformation
matrix may be provided on standard input which maps model\-space to
view\-space. In this case, the grid ranges from \-1.0 < = X,Y < = +1.0
in view space, with the size of the grid (number of rays fired)
specified with the \fB\-s\fP option. This option is most useful when
\fBrtedge\fP is being invoked from a shell script created by an
\fBmged\fP(1) \fIsaveview\fP command.
.sp
The following options are recognized:
.sp
\fB\-. #\fP
.RS 4
selects the factor used in NUgrid algorithm. Default is 1.5 .
.RE
.sp
\fB\-, #\fP
.RS 4
selects which space partitioning algorithm to use
.RE
.sp
\fB\-a #\fP
.RS 4
selects auto\-sizing, and gives the view azimuth in degrees.
Used with \fB\-e\fP and conflicts with \fB\-M\fP.
.RE
.sp
\fB\-b "# #"\fP
.RS 4
is sometimes useful for debugging.  A single ray is fired
at the pixel coordinates specified. This is best when accompanied by
debugging options. Note that the standard
\fBgetopt\fP(3) routine only allows options to
have one parameter, so the X and Y pixel coordinates need to be
combined into one string parameter by enclosing them in double quotes.
This option must follow any viewing parameters.
.RE
.sp
\fB\-e #\fP
.RS 4
selects auto\-sizing, and gives the view elevation in degrees.
Used with \fB\-a\fP and conflicts with \fB\-M\fP.
.RE
.sp
\fB\-g #\fP
.RS 4
sets the grid cell width, in millimeters. Ordinarily, the
cell width is computed by dividing the view size by the number of
pixels of width, so this option need not be used. To obtain exactly 1
inch ray spacing, specify \fB\-g25.4 .\fP If the grid cell width is
specified and the grid cell height (which would be set using
\fB\-G\fP) is \fInot\fP specified, the grid cell height defaults to be the
same as the width.
.RE
.sp
\fB\-m density,r,g,b\fP
.RS 4
enables an exponential shading of the void
between the eye and the first hit location.  This allows a cheap
simulation of atmospheric haze with lower performance impact than
explicit modeling of the air volume. The haze is computed using the
form:
.sp
.if n .RS 4
.nf
f = e^(\-distance * density)
g = 1.0 \- f
color = color * f + hazeRGB * g
.fi
.if n .RE
.sp
The color values are optional.  If not specified, they will have the
passable values 0.8 .9 .99 .
.sp
Example usage: \-m \(aq2.5e\-8,.75,.95,.99\(aq
.RE
.sp
\fB\-i\fP
.RS 4
enables \fIincremental mode\fP processing. (First, a single ray is
fired. Then, the screen is subdivided into four parts by evenly
subdividing in the vertical and horizontal directions. The previously
fired ray was the lower left corner; three more rays are fired. This
process recurses until full resolution has been reached. Assumes
square image. Also assumes fast path between CPU and display
hardware.)
.RE
.sp
\fB\-j xmin,ymin,xmax,ymax\fP
.RS 4
enables processing of \fIjust a
sub\-rectangle\fP, located within the rectangle (0,0) (width\-1,height\-1),
and whose screen coordinates (lower left and upper right corners) are
provided in the argument. Ray\-tracing will be limited to just those
pixels within the sub\-rectangle, and only those pixels will be
transmitted to the framebuffer. The corner pixels (xmin,ymin) and
(xmax,ymax) are included in the sub\-rectangle. This option exists
primarily for \fBmged\fP(1) to allow sweeping out a
rectangular portion of the view for ray\-tracing.
.RE
.sp
\fB\-k xdir,ydir,zdir,dist\fP
.RS 4
enables the use of a \fIcutting plane\fP. The
xdir, ydir, zdir, and dist define a plane (equivalent to a halfspace
primitive with the same parameters). The vector (xdir, ydir, zdir) is
normal to the plane and points away from the space to be
subtracted. The dist parameter specifies the distance from the origin
to the plane in the normal direction. The resulting image approximates
subtracting the halfspace from the objects being raytraced. Note that
this is not exactly the same as actually subtracting the halfspace,
but it is faster. If explicit lights are used, objects that are cut
away by the cutting plane will still cast shadows.
.RE
.sp
\fB\-l #\fP
.RS 4
selects lighting model.  Default is 0. Model 0 is a full
lighting model with the ability to implement Phong shading,
transparent and reflective objects, shadow penumbras, texture
maps, etc. In addition to ambient light, a small amount of light is
supplied from eye position. All objects in the active model space with
a material property string of "light" represent additional light
sources (up to 16 are presently permitted), and shadow computations
will be initiated automatically. (This mechanism is subject to further
change.) Model 1 is a diffuse\-lighting model only, and is intended for
debugging. Model 2 displays the surface normals as colors, and is
useful for examining curvature and surface orientation. Model 3 is a
three\-light diffuse\-lighting model, and is intended for
debugging. Model 4 is a curvature debugging display, showing the
inverse radius of curvature. Model 5 is a curvature debugging display,
showing the principal direction vector. Model 6 is for debugging the
UV parameterization used for surface texturing.  It is exactly the
same as applying the texture \(aqtestmap\(aq to every region.  The U
parameter is displayed in the red channel and the V parameter is
displayed in the blue channel. Model 7 is for using photon mapping to
simulate global illumination and caustics in a given scene.  Options
to photon mapping are passed through the \-l parameter in the following
format:
.sp
\-l7,Num_Photons,Caustics_Percent,Irradiance_Rays,Angular_Tolerance,
Random_Seed,Importance_Mapping_Toggle,Irradiance_Hypersampling_Toggle,
Visual_Irradiance_Toggle,Scale_Lumens,Load_Save_File
.sp
Example: \-l7,16384,0,10,60.0,0,0,0,0,1.0,scene.pm
.sp
Note: If just \-l7 is used, then the default values above will be
applied.  Light sources must also be explicitly defined with lumens
defined for each source, i.e., default light sources will not work.
.RE
.sp
\fB\-n #\fP
.RS 4
defines the height of the image as a number of scanlines.
.RE
.sp
\fB\-o output.pix\fP
.RS 4
specifies the name of a file to store the
\fBpix\fP(5) format output. The
\fBpix\-fb\fP(1) utility can be used later to
display ".pix" files. Note that using \-o disables parallel processing.
.RE
.sp
\fB\-p #\fP
.RS 4
sets the perspective, in degrees, with 0 < = # < 180
.RE
.sp
\fB\-r\fP
.RS 4
requests that overlapping regions be reported (on by default);
opposite of \fB\-R\fP .
.RE
.sp
\fB\-s #\fP
.RS 4
specifies the number of rays to fire in the X and Y
directions on a square grid. The default size is 512 (i.e., 512 x
512).
.RE
.sp
\fB\-t\fP
.RS 4
causes reversal of the order of grid traversal (default is not
to do that)
.RE
.sp
\fB\-u units\fP
.RS 4
specifies units, with "model" being used for the units of
the local model
.RE
.sp
\fB\-v [#]\fP
.RS 4
sets the output verbosity level for \fBrtedge\fP.  You can
use \-v 0 for no/minimal output or add \-v repeatedly up through four
levels (e.g., \-vvvv) to see all available output.  Default is all
available output.  The \-v option will also take a specific hexadecimal
value to turn on specific message categories (e.g., \-v 0xFF010030) of
output.
.RE
.sp
\fB\-w #\fP
.RS 4
defines the width of each scanline in pixels.
.RE
.sp
\fB\-x #\fP
.RS 4
sets the \fBlibrt\fP(3) debug flags to the
given hexadecimal bit vector. See raytrace.h for the bit
definitions. (Notice that \fB\-! #\fP sets the
\fBlibbu\fP(3) debug flags to the given hexadecimal
bit vector. See bu.h for the bit definitions.)
.RE
.sp
\fB\-A #\fP
.RS 4
Select angle for shading.  Default is 5.0 degrees; 89.0 will
produce an image where only steep drops and rises are shaded.
.RE
.sp
\fB\-B\fP
.RS 4
turns on the "benchmark" flag. This causes all intentional
random effects such as ray dither, color dither, etc., to be turned
off to allow benchmark timing comparison and benchmark result
comparison.
.RE
.sp
\fB\-C #/#/#\fP
.RS 4
sets the background color to the RGB value #/#/#,
where each # is in the range of 0 to 255 or 0.0 to 1.0. All
non\-background colors will be dithered away from this value.
.RE
.sp
\fB\-D #\fP
.RS 4
This is the "desired frame" flag, specifying the frame number
to start with. Used with animation scripts; specify the desired ending
(kill\-after) frame with \fB\-K #\fP .
.RE
.sp
\fB\-E #\fP
.RS 4
sets the distance from the eye point to the center of the
model RPP; default is the square root of 2. Only useful with
auto\-sizing, and conflicts with \fB\-M\fP .
.RE
.sp
\fB\-F framebuffer\fP
.RS 4
indicates that the output should be sent to the
indicated framebuffer. See \fBlibfb\fP(3) for more
details on the specification of a framebuffer.
.RE
.sp
\fB\-G #\fP
.RS 4
sets the grid cell height, in millimeters. If the grid cell
height is specified and the grid cell width (which would be set using
\fB\-g\fP) is \fInot\fP specified, the grid cell width defaults to be the
same as the height.
.RE
.sp
\fB\-H #\fP
.RS 4
This is the "hypersample" flag, specifying number of extra
rays to fire for each pixel to obtain more accurate results without
needing to store the extra pixels. Automatically invokes \fB\-J
1\fP. The final colors of all rays are averaged together. Better results
can be obtained by simply increasing the resolution, and decimating
the results with a filter such as
\fBpixhalve\fP(1).
.RE
.sp
\fB\-J #\fP
.RS 4
This is the "jitter" flag, which is a bit vector. If one
(\fB\-J 1\fP), it randomizes the point from which each ray is fired by
+/\- one half of the pixel size.  Useful if doing your own
post\-filtering for antialiasing, or to eliminate systematic errors.
This has been useful in obtaining more accurate results in a
volume\-calculating raytrace as well. If two (\fB\-J 2\fP), it shifts
the origin of the output frame once for each frame. The shift is along
a circular path in the plane of the frame, with a period of ten
seconds, and a radius of +/\- 1/4 pixel width. If three (\fB\-J 3\fP),
it performs both operations.
.RE
.sp
\fB\-K #\fP
.RS 4
sets the final (kill\-after) frame number. Used with animation
scripts in conjunction with \fB\-D #\fP .
.RE
.sp
\fB\-M\fP
.RS 4
causes reading of animation (model2view) matrix or animation
script from standard input. Conflicts with \fB\-a\fP and \fB\-e\fP
options.
.RE
.sp
\fB\-N #\fP
.RS 4
sets the NMG_debug flags to the given hexadecimalbit
vector. See h/nmg.h for the bit definitions.
.RE
.sp
\fB\-O output.dpix\fP
.RS 4
specifies the name of a file to store the
double\-precision floating\-point version of the
image. \fBdpix\-pix\fP(1) can be used to later
convert the file to \fBpix\fP(5) format
output. (Deferred implementation)
.RE
.sp
\fB\-P #\fP
.RS 4
specifies the maximum number of processors (in a
multi\-processor system) to be used for this execution.  The default is
system dependent. On "dedicated" multi\-processors, such as
workstations and super\-minis, the default is usually set for the
maximum number of processors, while on shared multi\-processors, such
as SuperComputers, usually just one processor is used by default.
.RE
.sp
\fB\-Q x,y\fP
.RS 4
selects pixel ray for query with debugging.  The option is
used to specify a single pixel for which the debug flags should be
turned on. The computation of all other pixels will be performed
without debugging. This is similar to the \-b option, except that it
does not limit rendering to the single ray.  The entire image is
computed.  This option is useful in debugging problems which arise
from specific computation sequences (such as the order of random
numbers previously drawn).
.RE
.sp
\fB\-R\fP
.RS 4
requests that overlapping regions not be reported; opposite of
\fB\-r\fP .
.RE
.sp
\fB\-S\fP
.RS 4
turns on stereo viewing. The left\-eye image is drawn in red,
and the right\-eye image is drawn in blue.
.RE
.sp
\fB\-T #\fP or \fB\-T #,#\fP or \fB\-T #/#\fP
.RS 4
sets the calculation tolerances
used by \fBlibrt\fP(3). If only one number is
given, it specifies the distance tolerance. Any two entities closer
than this distance are considered to be the same. The default distance
tolerance is 0.005mm. If the second number is given, it specifies the
value of the dot product below which two lines are to be considered
perpendicular. This number should be near zero, but in any case should
be less than 1. The default perpendicular tolerance is 1e\-6. If both
calculation tolerances are provided, they shall be separated by either
a slash ("/") or a comma (","), with no white space between them. For
example, the default tolerances would be specified as
\fB\-T0.005/1e\-6\fP on the command line.
.RE
.sp
\fB\-U #\fP
.RS 4
sets the Boolean variable \fIuse_air\fP to the given value. The
default is 0, which ignores regions that have non\-zero aircode values.
.RE
.sp
\fB\-V #\fP
.RS 4
sets the view aspect.  This is the ratio of width over height
and can be specified as either a fraction or a colon\-separated
ratio. For example, the NTSC aspect ratio can be specified by either
\fB\-V1.33\fP or \fB\-V4:3\fP .
.RE
.sp
\fB\-W\fP
.RS 4
specifies black lines on a white background.  this option sets
the image background color to a nearly pure white RGB of 255/255/254
and the foreground edge color to a nearly pure black RGB of 0/0/1.
This is equivalent to setting \-c "set background=255/255/254" and \-c
"set foreground=0/0/1".
.RE
.sp
\fB\-X #\fP
.RS 4
turns on the \fBrt\fP(1) program debugging
flags.  See raytrace.h for the meaning of these bits.
.RE
.sp
\fB\-! #\fP
.RS 4
turns on the \fBlibbu\fP(3) library
debugging flags.  See bu.h for the meaning of these bits. In
particular, specifying \fB\-!1\fP will cause \f(CRbu_bomb()\fP to dump core,
rather than logging the error and exiting. This is useful with
\fBdbx\fP(1) or \fBgdb\fP(1) for
debugging. (Notice that \fB\-x #\fP sets the
\fBlibbt\fP(3) debug flags to the given hexadecimal
bit vector. See raytrace.h for the bit definitions.)
.RE
.sp
\fB\-+ #\fP
.RS 4
specifies (setting argument to "t") that output is NOT binary
(default is that it is). \fB\-+\fP is otherwise not implemented.
.RE
.sp
\fB\-c\fP
.RS 4
Set special \fBrtedge\fP configuration variables.
.RE
.sp
The \fBrtedge\fP program is a simple front\-end to
\fBlibrt\fP(3).
.SH "ADDITIONAL OPTIONS"
.sp
\fBrtedge\fP replaces \fBlgt\fP(1). In addition to
the simple white edges on a black background (or black on white)
provided by \fBlgt\fP, \fBrtedge\fP allows arbitrary color
combinations. It also allows rendering into an existing framebuffer
and occlusion detection between two pieces of geometry. To configure
its behavior, \fBrtedge\fP makes copious use of the \fB\-c\fP option.
.sp
Note that this approach is necessitated by the fact that
\fBlibrt\fP(3) has used up nearly the entire
alphabet. A transition to GNU\-style long option names is planned.
.sp
\fB\-c "set foreground=#,#,#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set fg=#,#,#"\fP
.RS 4
set the color of the foreground (edges) to the
given r,g,b triple, where each of r,g,b, is in the range 0 to 255 or
0.0 to 1.0. The default is white (255/255/255).
.RE
.sp
\fB\-c "set background=#,#,#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set bg=#,#,#"\fP
.RS 4
set the color of the background to the r,g,b
triple, where each of r,g,b is in the range 0 to 255 or 0.0 to
1.0. The default is near\-black (0,0,1).
.RE
.sp
\fB\-c "set region_colors=#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set rc=#"\fP
.RS 4
determine whether to use the material color assigned
to an object as the edge color. Valid values are 1 (on) and 0
(off). The default is off. Using region colors overrides any
foreground color setting.
.RE
.sp
\fB\-c "set detect_regions=#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set dr=#"\fP
.RS 4
determine whether the boundary between two BRL\-CAD
regions is considered to be an edge. Valid values are 1 (on) and 0
(off). The default is off.
.RE
.sp
\fB\-c "set detect_distance=#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set dd=#"\fP
.RS 4
determine whether a difference in hit distance
between adjacent pixels defines an edge. Valid values are 1 (on) and 0
(off). The default is on.
.RE
.sp
\fB\-c "set detect_normals"\fP
.RS 4
and
.RE
.sp
\fB\-c "set dn=#"\fP
.RS 4
determine whether a difference in surface normals
between adjacent pixels defines an edge. Valid values are 1 (on) and 0
(off). The default is on.
.RE
.sp
\fB\-c "set detect_ids"\fP
.RS 4
and
.RE
.sp
\fB\-c "set di=#"\fP
.RS 4
determine whether a difference in component id
numbers between adjacent pixels defines an edge. Valid values are 1
(on) and 0 (off). The default is on.
.RE
.sp
\fB\-c "set overlaymode=#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set ov=#"\fP
.RS 4
configure the overlay mode to be either on (1) or
off (0). Overlay mode allows \fBrtedge\fP to write into an existing
framebuffer. The framebuffer is specified with the \-F option.
.RE
.sp
\fB\-c "set max_dist=#"\fP
.RS 4
and
.RE
.sp
\fB\-c "set md=#"\fP
.RS 4
override the maximum hit distance of neighboring
pixels before being declared an edge. The default value is computed
based on the size of the output image, approximately 1000 for the
default image/fb size.
.RE
.sp
\fB\-c "set antialias"\fP
.RS 4
and
.RE
.sp
\fB\-c "set aa"\fP
.RS 4
configure whether to perform antialiasing on
edges. Valid values are 1 (on) and 0 (off). The default is off.
.RE
.sp
\fB\-c "set both_sides"\fP
.RS 4
and
.RE
.sp
\fB\-c "set bs"\fP
.RS 4
configure whether to render both sides of an edge.
result are edges twice as thick but that work well with antialiasing.
Valid values are 1 (on) and 0 (off). The default is off.
.RE
.SH "OCCLUSION CHECKING"
.sp
\fBrtedge\fP has the ability to perform occlusion checking between
two sets of BRL\-CAD objects from the same database. Occlusion checking
determines which set of geometry is closer to the eyepoint and thus
should be rendered. The first set is that specified in the basic
object list (after the database). This set will be rendered using edge
detection. The second is specified using a \fB\-c\fP option.
.sp
Occlusion checking is most handy when combining \fBrtedge\fP
renderings with \fIrt\fP renderings. The syntax for such compositions is
daunting, but the results are cool.
.sp
\fB\-c"set occlusion_objects=\(rs"obj1 obj2 ... objN\(rs\fP
.RS 4
and
.RE
.sp
\fB\-c"set oo=\(rs"obj1 obj2 ... objN\(rs\fP
.RS 4
specify the second set of
geometry.
.RE
.sp
\fB\-c"set occlusion_mode=#\fP
.RS 4
and
.RE
.sp
\fB\-c"set om=#\fP
.RS 4
determine how \fBrtedge\fP behaves when performing
occlusion checking. There are three valid modes. Mode 2 is the
default.
.sp
\fImode 1 \- EDGES\fP An Only edge pixels are drawn.  Edges detected in the
first set of geometry are written to the framebuffer if and only if
they are NOT occluded by the second set of geometry. Edges are colored
according to the foreground or region color options.
.sp
\fImode 2 \- ALL HITS\fP Edge and non\-edge pixels are drawn.  All pixels
that hit the first set of geometry and are NOT occluded by the second
set are written to the framebuffer.  Edges are rendered in the
foreground or region color; non\-edges are rendered in the background
color.
.sp
\fImode 3 \- DITHER\fP Edge and dithered non\-edge pixels are drawn.  This
is like mode 2 except non\-edge pixels are dithered to make the
exterior geometry appear semi\-transparent.
.RE
.SH "EXAMPLES"
.sp
\fBrtedge\fP can be somewhat complicated to configure. These examples
illustrate both simple and complex examples. Hopefully they will be
enough to get you started. These examples use the havoc.g target
description that may be found in the source distribution.
.sp
Note that in practice it will usually be easiest to use the \fIsaveview\fP
command in \fBmged\fP to produce a script and then modify that script
to run \fBrtedge\fP .
.sp
.B Example 1. \fBrtedge\fP rendering of havoc.g
.br
.RS 4
.sp
\f(CRrtedge \-s 1024 \-o new.pix havoc.g havoc\fP
.sp
results in a 1024 by 1024 BRL\-CAD image file showing the edges on a
Havoc helicopter. The default settings are used, so the image has
white edges on a black background. Edges exist where there are
differences in component id, hit distance, surface normal, or between
hits and misses.
.sp
\f(CRrtedge \-s1024 \-o new.pix \-c"set fg=0/255/0 bg=255/0/0" havoc.g havoc\fP
.sp
changes the edge color to be green and the background color to be red.
.sp
\f(CRrtedge \-s1024 \-o new.pix \-c"set rc=1 dr=1" havoc.g havoc\fP
.sp
activates region detection and uses the region colors for the edges.
.sp
The remaining examples illustrate how to use \fBrtedge\fP in concert
with \fBrt\fP to produce merged images.  When merging \fBrtedge\fP
and \fBrt\fP images, it is helpful to use \fIsaveview\fP scripts in order
to maintain alignment of successive renderings.  In \fBmged\fP,
configure your view, save it via \fIsaveview\fP, and then open the file in
an editor. Duplicate the \fBrt\fP command block.  After duplicating
the block, change the second one to use \fBrtedge\fP.
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
You must use the \fB\-F\fP option instead of \fB\-o\fP when
performing overlay or occlusion renderings.  With \-F, a file or
framebuffer may be specified.
.sp .5v
.RE
.sp
This script will overlay bright orange edges on the Havoc.
.sp
.if n .RS 4
.nf
#!/bin/sh
rt \-M \-s1280 \-F new.pix \-C255/255/255\(rs
 $*\(rs
 havoc.g\(rs
 havoc\(rs
 2>> example1.log\(rs
 <<EOF
viewsize 8.000e+03;
orientation 2.4809e\-01 4.7650e\-01 7.4809e\-01 3.8943e\-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF

rtedge \-M \-s1280 \-F new.pix \(rs
 \-c"set dr=1 dn=1 ov=1"\(rs
 \-c"set fg=255,200,0" \(rs
 $*\(rs
 havoc.g\(rs
 havoc\(rs
 2>> example1.log\(rs

 << EOF
viewsize 8.000e+03;
orientation 2.4809e\-01 4.7650e\-01 7.4809e\-01 3.8943e\-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF
.fi
.if n .RE
.sp
Finally, this script will render the Havoc weapon systems in full
color, render the edges on the remainder of the aircraft in black, and
render the non\-edges in dithered gray to make them
semi\-transparent. Note that when specifying the occlusion objects, the
delimiting quotes must be escaped.
.sp
.if n .RS 4
.nf
#!/bin/sh

rt \-M \-s1280 \-F new.pix \-C255/255/255 \(rs
 $*\(rs
 havoc.g\(rs
 weapons\(rs
 2>> example2.log\(rs
 << EOF
viewsize 8.000e+03;
orientation 2.4809e\-01 4.7650e\-01 7.4809e\-01 3.8943e\-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF

rtedge \-M \-s1280 \-F new.pix \(rs
 \-c"set dr=1 dn=1 om=3"\(rs
 \-c"set fg=0,0,0 bg=200,200,200"\(rs
 \-c"set oo=\(rs"weapons\(rs" "\(rs
 $*\(rs
 havoc.g\(rs
 havoc_front havoc_middle havoc_tail landing_gear main_rotor\(rs
 2>> example2.log\(rs

 << EOF
viewsize 8.000e+03;
orientation 2.4809e\-01 4.7650e\-01 7.4809e\-01 3.8943e\-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF
.fi
.if n .RE
.sp
In general, if you are mixing \fBrt\fP and \fBrtedge\fP renderings,
and the objects being rendered are different, occlusion checking
should be used.
.RE
.SH "SEE ALSO"
.sp
\fBmged\fP(1), \fBrt\fP(1),
\fBfbserv\fP(1), \fBlibrt\fP(3)
.SH "DIAGNOSTICS"
.sp
Numerous error conditions are possible, usually due to errors in the
geometry database. Descriptive messages are printed on stderr (file
descriptor 2).
.SH "AUTHORS"
.sp
Ronald Anthony Bowers
.sp
Michael John Muuss
.SH "BUGS"
.sp
Most deficiencies observed while using the \fBrtedge\fP program are a
consequence of problems in \fBlibrt\fP(3).
.SH "COPYRIGHT"
.sp
This software is Copyright (c) 1989\-2021 by the United States
Government as represented by U.S. Army Research Laboratory.
.SH "BUG REPORTS"
.sp
Reports of bugs or problems should be submitted via electronic mail to
.MTO "devs\(atbrlcad.org" "" ""