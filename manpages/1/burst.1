'\" t
.\"     Title: burst
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2021-07-14
.\"    Manual: BRL-CAD
.\"    Source: BRL-CAD
.\"  Language: English
.\"
.TH "BURST" "1" "2021-07-14" "BRL\-CAD" "BRL\-CAD"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
burst \- Prepare shotline and burst point library inputs for PDAM.
.SH "SYNOPSIS"
.sp
\fBburst\fP [\-P] [input_file]
.SH "DESCRIPTION"
.sp
\fBburst\fP uses LIBRT raytracing to prepare inputs to the Point
Burst Damage Assessment Model (PDAM) in the form of shotline files and
burst point library files.  For more information about PDAM, see
\c
.URL "http://www.dtic.mil/docs/citations/ADA273171" "ARL\-CR\-69: A Guide to
FASTGEN Target Geometric Modeling" .
.sp
The \fBburst\fP program is designed to allow many options to be
configured before any outputs are calculated. Unless otherwise stated
in the individual command descriptions, a given command will nullify
any previous occurrence of the same directive until an \fBexecute\fP
command is given. For instance, the command \fBtarget\-file\fP \fItank1\fP
followed by \fBtarget\-file\fP \fItank2\fP will nullify the reference to
tank1. It is also important to remember that the \fBunits\fP command
impacts how subsequent physical quantities are read by other commands,
and the output from an \fBexecute\fP command will use whatever units
are current. Once the input parameters are specified, the
\fBexecute\fP command will start a run.  Output will be reported
using the current setting for \fBunits\fP at the time the
\fBexecute\fP is run.  Many runs may occur during an instance of the
\fBburst\fP program. One such instance is referred to as a session.
.SH "OPTIONS"
.sp
\fB\-p\fP
.RS 4
Plot points (default).
.RE
.sp
\fB\-P\fP
.RS 4
Plot lines.
.RE
.SH "COMMANDS"
.sp
Commands are defined via an input file and passed to burst when it is
first invoked. All commands to burst are composed of one or more words
connected by hyphens and each command may require one or more
arguments that must be separated by either spaces or tabs. A line that
begins with the "#" symbol is considered a comment and will be
ignored. The following table provides a brief overview of the
available commands, with subsequent sections covering key areas in
more detail.  In the table, flag arguments have yes or no values, an
angle is expressed in degrees as a floating\-point quantity, distances
and coordinates such as X, Y, Z, left, right, etc. are also
floating\-point numbers, and count represents an integer. Square
brackets delimit optional arguments.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table 1. Burst Commands
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Command
T}:T{
.sp
Arguments
T}:T{
.sp
Description
T}
T{
.sp
\fBattack\-direction\fP
T}:T{
.sp
\f(CRazim_angle\fP \f(CRelev_angle\fP
T}:T{
.sp
specify azimuth and elevation of attack relative to target
T}
T{
.sp
\fBburst\-air\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
input burst air idents from file
T}
T{
.sp
\fBburst\-armor\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
input burst armor idents from file
T}
T{
.sp
\fBburst\-coordinates\fP
T}:T{
.sp
\f(CRX\fP \f(CRY\fP \f(CRZ\fP
T}:T{
.sp
input single burst point location in target coordinates
T}
T{
.sp
\fBburst\-distance\fP
T}:T{
.sp
\f(CRdistance\fP
T}:T{
.sp
offset burst point along shotline
T}
T{
.sp
\fBburst\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
output burst point library to file
T}
T{
.sp
\fBcell\-size\fP
T}:T{
.sp
\f(CRdistance\fP
T}:T{
.sp
specify shotline separation (equidistant horizontal and vertical)
T}
T{
.sp
\fBcolor\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
input ident to color mapping from file (for graphics)
T}
T{
.sp
\fBcone\-half\-angle\fP
T}:T{
.sp
\f(CRangle\fP
T}:T{
.sp
specify limiting angle for spall ray generation
T}
T{
.sp
\fBcritical\-comp\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
input critical component idents from file
T}
T{
.sp
\fBdeflect\-spall\-cone\fP
T}:T{
.sp
\f(CRflag\fP
T}:T{
.sp
deflect axis of spall cone half way towards exit normal
T}
T{
.sp
\fBdither\-cells\fP
T}:T{
.sp
\f(CRflag\fP
T}:T{
.sp
if yes, randomly offset shotline within grid cell
T}
T{
.sp
\fBenclose\-target\fP
T}:T{
.sp

T}:T{
.sp
generate rectangular grid of shotlines for full target envelope
T}
T{
.sp
\fBenclose\-portion\fP
T}:T{
.sp
\f(CRleft\fP \f(CRright\fP \f(CRbottom\fP \f(CRtop\fP
T}:T{
.sp
generate partial envelope by specifying grid boundaries
T}
T{
.sp
\fBerror\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
divert all diagnostics to file
T}
T{
.sp
\fBexecute\fP
T}:T{
.sp

T}:T{
.sp
initiate a run (no output produced without this command)
T}
T{
.sp
\fBgrid\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
save shotline locations (Y\(aq Z\(aq) in file
T}
T{
.sp
\fBground\-plane\fP
T}:T{
.sp
\f(CRflag [Z +X \-X +Y \-Y]\fP
T}:T{
.sp
if yes, burst on ground
T}
T{
.sp
\fBhelp\fP
T}:T{
.sp

T}:T{
.sp
display a list of available commands
T}
T{
.sp
\fBhistogram\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
write hit frequency histogram to file
T}
T{
.sp
\fBimage\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
generate frame buffer image on a specified file or device
T}
T{
.sp
\fBinput\-2d\-shot\fP
T}:T{
.sp
\f(CRY\(aq\fP \f(CRZ\(aq\fP
T}:T{
.sp
input single shotline location as grid offsets
T}
T{
.sp
\fBinput\-3d\-shot\fP
T}:T{
.sp
\f(CRX\fP \f(CRY\fP \f(CRZ\fP
T}:T{
.sp
input single shotline location in target coordinates
T}
T{
.sp
\fBmax\-barriers\fP
T}:T{
.sp
\f(CRcount\fP
T}:T{
.sp
specify the maximum number of components to report along spall ray
T}
T{
.sp
\fBmax\-spall\-rays\fP
T}:T{
.sp
\f(CRcount\fP
T}:T{
.sp
specify the desired number of spall rays generated per burst point
T}
T{
.sp
\fBplot\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
generate plot data in file
T}
T{
.sp
\fBquit\fP
T}:T{
.sp

T}:T{
.sp
quit the application
T}
T{
.sp
\fBread\-2d\-shot\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
read shot locations from file as grid offsets (see \fBinput\-2d\-shot\fP)
T}
T{
.sp
\fBread\-3d\-shot\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
read shot locations from file in target coordinates (see \fBinput\-3d\-shot\fP)
T}
T{
.sp
\fBread\-burst\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
read burst point locations from file (see \fBburst\-coordinates\fP)
T}
T{
.sp
\fBread\-input\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
read key word commands from file
T}
T{
.sp
\fBreport\-overlaps\fP
T}:T{
.sp
\f(CRflag\fP
T}:T{
.sp
if yes, log overlap diagnostics
T}
T{
.sp
\fBshotline\-burst\fP
T}:T{
.sp
\f(CRflag\fP
T}:T{
.sp
if yes, generate burst points along shotlines
T}
T{
.sp
\fBshotline\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
output shot line data to file
T}
T{
.sp
\fBtarget\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
read BRL\-CAD database from file
T}
T{
.sp
\fBtarget\-objects\fP
T}:T{
.sp
\f(CRobject0\fP \f(CR[object1 object2 ...]\fP
T}:T{
.sp
list objects from BRL\-CAD database to interrogate
T}
T{
.sp
\fBunits\fP
T}:T{
.sp
\f(CRname\fP
T}:T{
.sp
linear units (inches, feet, millimeters, centimeters,meters)
T}
T{
.sp
\fBwrite\-input\-file\fP
T}:T{
.sp
\f(CRfile\fP
T}:T{
.sp
save script of commands in file
T}
T{
.sp
#
T}:T{
.sp

T}:T{
.sp
any line beginning with the \(aq#\(aq character is a comment
T}
.TE
.sp
.SH "USER PREFERENCES"
.SS "Units of Measure"
.sp
The \fBunits\fP command will set the linear units for input and
output. This command should be used before any scalar quantities such
as coordinates, distances, or sizes are input. The units may be
changed to accommodate input files of differing units, but the output
from a particular run will reflect whatever the units were set to when
the \fBexecute\fP command was given. One argument is expected out of
the following list and must be spelled correctly: millimeters,
centimeters, meters, inches and feet. The default units are
millimeters.
.sp
Note that when specifying angles as options to commands angles are
always expressed in degrees, not radians.
.SS "Region Overlap Reporting"
.sp
It is considered an error if two regions in a BRL\-CAD .g file occupy
the same space; we call this an overlap. The ray tracing library
(librt) will report overlapping regions that are intersected by
shotlines or burst rays to the burst application and the program will,
by default, print out any that have a line of sight thickness of at
least 0.25 millimeters (see Error Log). Although a
target may only have a small number of overlapping regions, an error
will be reported for each ray that intersects one of them.  Generally
this results in the messages being repetitious. Although these
diagnostics are important for fixing problems in the geometric
description of the target, the user may wish to proceed with a
production run and the printing of these errors can slow the execution
time considerably. A yes or no argument to the \fBreport\-overlaps\fP
command will turn the diagnostics on or off. Regardless of whether or
not individual overlaps are reported, the total number detected will
be logged.
.sp
When overlap reporting is enabled, the full path name of both regions
is printed as seen in the following example:
.sp
.if n .RS 4
.nf
OVERLAP:
reg=/component/turret/tur.ext/tur.armor/tur.bot{{0}} isol=s2,
reg=/component/hull/hull.ext/hull.armor/r1.top{{0}} osol=ss4,
depth 544.21mm at (\-471.784,812.8,0) x\-2 y1 lvl0 purpose=shotline
OVERLAP:
reg=/component/turret/tur.ext/tur.ring{{0}} isol=ss2,
reg=/component/turret/tur.ext/tur.armor/tur.bot{{0}} osol=s2,
depth 25.39mm at (\-418.907,812.8,0) x\-2 y1 lvl1 purpose=normal thickness
OVERLAP:
reg=/component/turret/tur.ext/tur.ring{{0}} isol=ss2,
reg=/component/turret/tur.ext/tur.armor/tur.bot{{0}} osol=s2,
depth 52.88mm at (\-418.907,\-812.8,0) x\-2 y1 lvl1 purpose=spall ray
.fi
.if n .RE
.sp
The zero enclosed in double curly brackets is intended to discriminate
between instances. Theoretically, isol and osol are the names of the
starting and ending solids associated with the boolean operations on
the overlapping partition. In practice these solid names are typically
not helpful in diagnosing the problem, but the region names should be
sufficient. The depth is the line\-of\-sight thickness of the
overlapping partition in millimeters. In parentheses, are printed the
target coordinates of the intersection of the ray with the
overlap. The x\-2 and y1 reveal that the grid indices of the shotline
are \-2, 1; this means that the shotline was 2 cells to the left, and
one cell above the grid origin. If lvl (meaning ray tracing recursion
level) is zero, then the overlap resulted from a shotline, but if it
is one, it could represent either a burst ray intersection or a probe
to calculate the normal thickness of a component intersected by the
shotline. The real purpose of the ray is stated last.
.SH "SHOTLINING OPTIONS"
.sp
Shotlining is a technique whereby lines are described in the target
coordinate system and information is requested about the geometry that
intersects those lines in 3\-space. This technique is useful for
analysis programs that must simulate threat/target interactions, and
therefore must sample the geometry along the threat path. Typically
the lines are specified discretely, by a point and a direction, or a
grid of lines is generated that is oriented perpendicular to the
direction of attack. A grid is rectangular, but is subdivided along
its height and width uniformly resulting in square cells. Gridding
techniques include passing a line called a shotline through the center
of each cell, or alternatively, dithering each shotline\(cqs position
within its respective cell\(cqs boundaries (see Dithering
Shotlines).
.sp
The user is faced with several choices for generating shotlines;
full\-target envelope, partial envelopes, or discrete shots. No matter
what shotlining method is used, a grid always exists as a frame of
reference for specifying 2\-dimensional coordinates in the plane normal
to the direction of attack. This 2\-dimensional coordinate system is a
projection of the shotline coordinate system (also referred to as the
primed coordinate system). For the simple case of a zero azimuth, zero
elevation attack, the X\(aq, Y\(aq, and Z\(aq axes in the shotline coordinate
system coincide with the X, Y, and Z axes of the target coordinate
system and the shotline direction is parallel to the X\(aq axis and
headed toward decreasing coordinates. Other orientations are described
by rotating the X\(aq, Y\(aq, and Z\(aq axes to keep the shotline direction
always down the X\(aq axis. This transformation involves two rotations;
first a rotation of the primed coordinate system about the coincident
Z and Z\(aq axes by the specified azimuthal angle, followed by a rotation
about the new Y\(aq axis by the specified elevation angle. Since the grid
is a 2\-d projection of the shotline coordinate system, it has no X
coordinate; if the user\(cqs viewpoint is from the direction of attack,
the Y\(aq axis can be thought of as horizontal with increasing
coordinates to the right, and the Z\(aq axis as vertical and increasing
in the upward direction.
.SS "Attack Direction"
.sp
The orientation of shotlines with respect to the coordinate system of
the target are described by azimuth and elevation angles. These angles
must be specified in degrees as floating\-point numbers via the
\fBattack\-direction\fP.
.SS "Gridding"
.sp
An envelope refers to a grid that is dimensioned such that its
rectangular area, projected normal to the grid, will cover optionally
all or part of the target. The \fBenclose\-target\fP option will
generate a grid that is guaranteed to cover the entire target. Since
BRL\-CAD uses combinatorial solid geometry as one of its shape
representation methods, the dimensions of the target are not known in
advance. Therefore, a worst case bounding rectangular parallel piped
(RPP) is used to generate the grid and the grid may be larger than
necessary. In addition, depending on the attack aspect, the presented
area of some targets may not fill up a rectangular grid well. This
should not be a problem since ray tracing outside the target
boundaries is cheap, but if desired the grid can be trimmed down with
the partial envelope option \fBenclose\-portion\fP. The grid origin is
always aligned with the target origin.
.sp
The \fBenclose\-portion\fP option allows the user to generate a
sub\-grid by specifying the distances from the grid origin to the
sub\-grid\(cqs left, right, top, and bottom boundaries.
.SS "Cell Size"
.sp
The dimensions of a grid cell are input as floating\-point values that
represent the distances between the centers of adjacent
cells. \fBcell\-size\fP also expresses the projected area of influence
associated with a shotline or burst ray. Therefore, \fBcell\-size\fP
must be specified even when a grid will not be generated, such as with
discrete shot or discrete burst point selection (see
Input Discrete Shots and Input
Discrete Burst Points).
.SS "Dithering Shotlines"
.sp
When gridding, shotlines normally pass through the center of each
cell, however, they may be also be dithered via the
\fBdither\-cells\fP command. If the user chooses the latter, 2 random
numbers are selected for each cell that are used to offset the
shotline in both parametric directions of the grid plane, but within
the respective cell\(cqs boundaries.
.SS "Input Discrete Shots"
.sp
If the user wants to fire at a known point on the target, he or she
may wish to describe the shotline location in target coordinates. When
coupled with the attack direction, each 3\-dimensional coordinate
uniquely specifies a shotline.  The \fBinput\-3d\-shot\fP command
allows the user to type in a single shot location as an X, Y, and Z
coordinate that is run when the \fBexecute\fP command is given, but
remember that no queueing of shots occurs in this mode; the last set
of coordinates entered will be used.  For inputing multiple shots,
\fBread\-3d\-shot\-file\fP can be used to loop through every set of
target coordinates in the named file after the \fBexecute\fP command
is run. The file should contain three floating\-point numbers on each
line separated by white space (blanks or tabs).
.sp
Another way to describe a shot location is in the shotline coordinate
system. Since the X\(aq location of the shot is irrelevant (the shotline
is parallel to the X\(aq axis) a shot may be specified as a Y\(aq and Z\(aq
coordinate. These coordinates can also be referred to as horizontal
and vertical grid offsets.  The \fBinput\-2d\-shot\fP option allows the
user to type in a single shot location as a Y\(aq, and Z\(aq coordinate
which will be run when the \fBexecute\fP command is given, but like
the 3d case no queueing of shots occurs in this mode and only the last
set of grid offsets entered will be used.  To input multiple shots,
the \fBread\-2d\-shot\-file\fP can be used; \fBexecute\fP will loop
through every set of grid offsets in the named file. The file should
contain three floating\-point numbers on each line separated by white
space (blanks or tabs).
.SH "BURSTING OPTIONS"
.sp
Bursting is a technique for sampling a target\(cqs geometry with the use
of ray tracing. As opposed to shotlining involving parallel rays,
bursting employs a distribution of rays that emanate from a single
point. The burst program generates rays that approximate a uniform
distribution over a user\-specified solid angle (see
Sampling Cone Half Angle) and having a density (see
Number of Sampling Rays) that is also under control
of the user. The user also has a choice between several mechanisms for
setting up burst point locations depending on the particular threat he
is attempting to emulate.
.SS "Method of Locating Burst Point"
.sp
Depending on threat type, burst points may be located using two basic
techniques. The first technique is simply to input the burst point
coordinates. This method can be used to compare vulnerability analysis
results with empirical results from the firing range or combat
field. The second technique available to the user is to burst along a
shotline. This option is used more for predicting the burst point
location based on target geometry, given certain parameters that
describe the target/threat interactions.
.SS "Input Discrete Burst Points"
.sp
The input of explicit burst point coordinates can be accomplished
either by typing them in one at a time or by reading a file of target
X, Y, and Z coordinates.
.sp
The \fBburst\-coordinates\fP command allows the user to type in a
single burst point location as an X, Y, and Z coordinate. When the
\fBexecute\fP command is given, that one burst point will be run. No
queueing of burst points occurs in this mode, the last set of
coordinates entered will be used.
.sp
The \fBread\-burst\-file\fP command allows the user to specify a number
of burst points from a file; this option will, after submission of an
execute directive, loop through every set of target coordinates in the
named file. The file should contain three numbers on each line
separated by white space (blanks or tabs).
.SS "Burst on Contact"
.sp
The \fBshotline\-burst\fP command can be given a yes or no argument to
either enable or disable this method of generating burst points. When
a yes argument is given, a second yes or no argument is also required
(see Burst on Armor). Bursting along a shotline
can be done different ways depending on the combination of several
options. The location of the burst point is based on the triggering
mechanism that is selected with the burst distance parameter.
.SS "Burst on Armor"
.sp
If the \fBburst\-distance\fP paramter is set to a negative or zero
value, then interior burst points will be generated (see
Burst Distance). This method of bursting requires
the input of burst armor idents and, by default, burst air idents are
also required. If the user does not want to require that certain air
be present to trigger a burst point, the shotline\-burst command has a
second argument. When this second argument is set to no, bursting will
occur as long as burst armor is followed by any air or void (empty
space), and the burst air file is not required. For more information
see Burst Armor and Burst Air Ident Files.
.SS "Ground Plane Bursting"
.sp
Ground plane bursting is a vehicle for evaluating the effect of
fragmenting warheads on light\-armored vehicles when they strike the
ground in close proximity to the target. The \fBground\-plane\fP
command is only relevant when bursting along a shotline is
selected. The ground is modeled as a rectangle lying in a plane
parallel to the target X\-Y plane with edges parallel to the X and Y
axes. The grid will be enlarged to include the ground plane; it is
important for efficiency to limit the size of the ground plane to
match the range of the fragments that may be generated by the
particular threat being modeled. When enabling this option, the
\fBground\-plane\fP command is given a yes argument followed by the
height of the target above the ground, and the distances that the
ground rectangle extends out positive X, negative X, positive Y, and
negative Y axes.
.SS "Bursting Parameters"
.sp
The following parameters influence both the triggering mechanism for
burst points, as well as the characteristics of the cone of rays
generated from each point.
.SS "Burst Distance"
.sp
The \fBburst\-distance\fP parameter is modeled after the BDIST
parameter used by the Air Force\(cqs PGEN code. The role of this
parameter is overloaded, however it was retained to aid PGEN users in
transitioning to the \fBburst\fP program. If it is zero or negative,
then interior bursting is enabled, otherwise, if it is greater than
zero, exterior bursting will occur, subject to certain conditions (see
below). The magnitude of this parameter is used to offset the burst
point location along the shotline relative to the geometry that
triggered the burst.
.SS "Interior Bursting"
.sp
Burst armor refers to a component whose ident code is found in the
list input by the \fBburst\-armor\-file\fP command. Similarly, burst
air refers to a component whose ident code is found in the list input
by the \fBburst\-air\-file\fP directive. If interior bursting is
enabled and a burst armor component is encountered along a shotline
that is immediately followed by burst air, then a burst point will be
located the absolute value of burst distance beyond the exit of the
shotline from the component. This means that if burst distance is
zero, the burst point will lie at the burst armor/air interface, and
if it\(cqs \-5.5, the burst point will lie 5.5 units inside the air
compartment from the back surface of the armor.
.SS "Exterior Bursting"
.sp
If burst distance is greater than zero, the first component
encountered along the shotline will trigger a burst point, regardless
of its ident code, that will be located burst distance in front of the
shotline entry point. This technique simulates the behavior of a
fragmenting munition with a standoff fuzing such that detonation is
triggered before the collision of the warhead with the target. The
burst distance is set to imitate the built in standoff of the
warhead. When employing exterior bursting methods, burst armor and
burst air are not used.
.SS "Sampling Cone Half Angle"
.sp
To limit the solid angle within which burst rays will be generated,
the user may specify a cone half angle. This angle represents the
degrees (in floating point) from the axis of the cone to its limiting
surface. The default value for the cone half angle is 45 degrees.
.SS "Deflected Sampling Cone"
.sp
The spall cone axis is, by default, aligned with the shotline. In
reality, the center of mass of the spall cloud would be between the
shotline direction and the exit normal of the shotline from the
spalling component. By aligning the spall cone axis with a vector
halfway between the shotline and the exit normal, a narrower cone half
angle can be used and still sample within the solid angle of
interest. This technique can therefore be used to cut down on the
number of rays calculated without lowering the sampling density. The
\fBdeflect\-spall\-cone\fP command takes a yes or no argument about
whether or not to divert the cone axis.
.SS "Number of Sampling Rays"
.sp
The sampling ray density within the spall cone is controlled by
specifying the maximum number of rays desired with the
\fBmax\-spall\-rays\fP command. Due to the uniform distribution
algorithm employed, the number of rays calculated will be slightly
less.
.SS "Maximum Barriers"
.sp
For munitions known to have limited penetration capability, the user
may set a limit on the number of burst ray intersections reported with
the \fBmax\-barriers\fP command. The effect of setting this parameter
is to reduce the size of the burst point library (see
Burst Point Library) by limiting the number of
components that will be reported per burst ray. By default, up to 100
components are reported, as it is not expected that this number will
be reached under normal circumstances.
.SH "INPUT FILE OPTIONS"
.SS "Target\-Related Input Files"
.sp
This group of commands is for specification of target\-specific input
files.
.SS "Target Data Base File"
.sp
The input of the target\(cqs BRL\-CAD .g file is accomplished with the
\fBtarget\-file\fP command. Note that only one data base may be read
in during a given session. If the user wishes to change the target
once the execute command has been given, they must exit the burst
program and start a new session.
.sp
After specifying the BRL\-CAD .g file, the user must list all of the
objects in the .g hierarchy that they wish to include in the analysis
with the \fBtarget\-objects\fP command. The objects must be listed as
arguments to one \fBtarget\-objects\fP command with spaces or tabs as
separators. Note that only one list of objects may be loaded per
session, however, they do not get loaded until the \fBexecute\fP
command is given.
.SS "Ident List Input Files"
.sp
Idents refer to the region ident code from the BRL\-CAD .g file. Lists
of idents may be specified singly or as ranges. Individual idents must
appear as one per line, but ranges are specified by two numbers on a
line that are separated by one or more of the following characters:
comma, hyphen, colon, semicolon, space, or tab. For example:
.sp
.if n .RS 4
.nf
600\-999
1011
4002\-4050
8000
9001
9004
9005
.fi
.if n .RE
.SS "Burst\-Armor and Burst\-Air Ident Files"
.sp
When interior burst points are to be generated along a shotline (see
Interior Bursting) a file of burst armor idents
must be specified with the \fBburst\-armor\-file\fP
command. Additionally a burst air idents file must be specified with
the \fBburst\-air\-file\fP command. If a shotline intersects a
component whose ident has been input as a burst armor and it is
immediately followed by burst air a burst point will be triggered.
.SS "Critical Component Idents"
.sp
Whether interior or exterior bursting is being employed, information
about components hit by burst rays will only be output for rays that
hit critical components. The file name containing a list of critical
component idents must therefore be specified by the
\fBcritical\-comp\-file\fP command if burst points are to be generated.
.SS "Color Mapping Input Files"
.sp
The \fBcolor\-file\fP command allows users to assign colors to
component idents for graphics options, in particular, the
\fBimage\-file\fP and \fBplot\-file\fP commands. The format of this
file is 5 numbers per line separated by blanks or tabs. The first
number is the low end of an ident range and the second number is the
high end of the range (both numbers are inclusive). This range is
mapped to the color specified by the last 3 numbers on the line that
are red, green, and blue components of the color (values for these
components must be between 0 and 255 inclusive).  For example:
.sp
.if n .RS 4
.nf
4001 4003   255 255 0     # Fuel
4050 4050   255 255 0     # Fuel
8000 8001   255 100 255   # Ammo
100 165     150 255 100   # Hull armor
610 619     220 150 100   # Commander
720 729     220 150 100   # Gunner
830 839     220 150 100   # Loader
940 949     220 150 100   # Driver
.fi
.if n .RE
.SS "Project\-Related Input Files"
.SS "Reading Session Files"
.sp
The \fBread\-input\-file\fP command reads an input file of
commands. These files can be generated manually by using a text editor
or saved from a session file with the \fBwrite\-input\-file\fP command.
See Command Input for the format of this file.
.SS "Shotline and Burst Point Input Files"
.sp
For an explanation of commands for reading in files of shotline or
burst point coordinates, see Input Discrete Shots and
Input Discrete Burst Points.
.SH "OUTPUT FILE OPTIONS"
.sp
The following commands will turn on optional output. By default, no
output is produced except error logging (see Error
Log), unless an output file is specified with the appropriate
command. Any combination of output options may be specified for a
particular run. Note that specifying an output file will cause an
existing file with that name to be truncated to zero
length. Therefore, only one such command should be entered per session
for a particular file name. Multiple runs during a session will append
to the same files if intervening commands to change the output file
name are not given, except for the graphics files as explained
below. Note that there is no way to append to a file created by a
previous session of the burst program, but these files may be
concatenated after the fact.
.SS "Burst Point Library File"
.sp
The \fBburst\-file\fP command will open the named file for creating a
burst point library. If the file exists, it will be truncated by this
command.
.SS "Shotline File"
.sp
The \fBshotline\-file\fP command will open the named file for creating
a shotline file. If the file exists, it will be truncated by this
command.
.SS "Plot File"
.sp
The \fBplot\-file\fP command generates a plot file, using BRL\-CAD
extensions to the standard format. This option is useful for examining
the shotline and burst ray information graphically as a
three\-dimensional vector plot. Due to constraints inherent in the plot
format, these plots must be displayed as a post\-process step by using
a BRL\-CAD plotting utility such as \fBpl\-fb\fP. Because some of these
display programs do not support multiple plots per file, the file name
should be changed between runs. The following table describes the
color mapping associated with these plots:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table 2. Color Key for Plots
.TS
allbox tab(:);
lt lt lt lt lt.
T{
.sp
Color
T}:T{
.sp
R
T}:T{
.sp
G
T}:T{
.sp
B
T}:T{
.sp
Representation
T}
T{
.sp
yellow
T}:T{
.sp
255
T}:T{
.sp
255
T}:T{
.sp
0
T}:T{
.sp
grid cell centers
T}
T{
.sp
red
T}:T{
.sp
255
T}:T{
.sp
0
T}:T{
.sp
0
T}:T{
.sp
burst cone
T}
T{
.sp
blue
T}:T{
.sp
0
T}:T{
.sp
0
T}:T{
.sp
255
T}:T{
.sp
default component intersection
T}
T{
.sp
lt blue
T}:T{
.sp
100
T}:T{
.sp
100
T}:T{
.sp
255
T}:T{
.sp
default outside air intersection
T}
T{
.sp
lt green
T}:T{
.sp
100
T}:T{
.sp
255
T}:T{
.sp
100
T}:T{
.sp
default inside air intersection
T}
T{
.sp
purple
T}:T{
.sp
255
T}:T{
.sp
0
T}:T{
.sp
255
T}:T{
.sp
default critical component intersection
T}
.TE
.sp
.sp
If the user has specified a color mapping file with the
\fBcolor\-file\fP command, then those colors will be used rather than
the above colors for all shotline/ray intersections.
.SS "Frame Buffer Image"
.sp
The \fBimage\-file\fP command will generate a color image that
provides the user with immediate feedback about a run. The grid is
displayed graphically and each cell location is dynamically color
coded to show its current status. The following table describes the
color mapping associated with the grid:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table 3. Color Key for Frame Buffer Image
.TS
allbox tab(:);
lt lt lt lt lt.
T{
.sp
Color
T}:T{
.sp
R
T}:T{
.sp
G
T}:T{
.sp
B
T}:T{
.sp
Representation
T}
T{
.sp
red
T}:T{
.sp
255
T}:T{
.sp
0
T}:T{
.sp
0
T}:T{
.sp
axis of grid
T}
T{
.sp
black
T}:T{
.sp
0
T}:T{
.sp
0
T}:T{
.sp
0
T}:T{
.sp
grid cell boundaries
T}
T{
.sp
blue
T}:T{
.sp
0
T}:T{
.sp
0
T}:T{
.sp
255
T}:T{
.sp
outside of grid
T}
T{
.sp
lt grey
T}:T{
.sp
200
T}:T{
.sp
200
T}:T{
.sp
200
T}:T{
.sp
shot missed target
T}
T{
.sp
white
T}:T{
.sp
255
T}:T{
.sp
255
T}:T{
.sp
255
T}:T{
.sp
shot hit target
T}
T{
.sp
lt green
T}:T{
.sp
200
T}:T{
.sp
255
T}:T{
.sp
200
T}:T{
.sp
burst occurred but hit no critical components
T}
T{
.sp
pink
T}:T{
.sp
255
T}:T{
.sp
200
T}:T{
.sp
200
T}:T{
.sp
burst occurred and hit some critical components
T}
T{
.sp
purple
T}:T{
.sp
255
T}:T{
.sp
0
T}:T{
.sp
255
T}:T{
.sp
a ground burst occurred
T}
.TE
.sp
.sp
In addition to the above cell colors, hits on critical components by
burst rays are depicted as a colored pixel projected into grid space
from the intersection point where the ray enters the component. Colors
for the components are mapped from ident numbers according to the
table specified by the user with the \fBcolor\-file\fP command and
shaded using a lighting model illuminated from the viewing direction.
.SS "Grid File"
.sp
The \fBgrid\-file\fP command will store each shotline coordinate
generated during the run as grid offsets. These files can later be
read in to replicate a previous run\(cqs grid or discrete shots by using
the \fBread\-2d\-shot\-file\fP command. This capability is especially
useful when dithered shotlines have been used and it is desired that
the same shotlines be used in another run. Note that the shotline
intersection information is not saved, just the grid offsets for each
shotline.
.SS "Script File"
.sp
During a session, all commands are saved in a temporary file. The
\fBwrite\-input\-file\fP command will create a snapshot of this session
file, that can later be used to recreate the current session up to the
point when the file was written. The session or input files can later
be used in one of two ways: either read in with the
\fBread\-input\-file\fP command, or supplied on the standard input of
the \fBburst\fP program. Note that the \fBwrite\-input\-file\fP and
\fBread\-input\-file\fP commands will not be included in the input
files, but the commands read in by the latter will.
.SS "Error Log"
.sp
The \fBerror\-file\fP command is useful to save errors in a log file
and prevent copious ray tracer diagnostics from scrolling by on the
screen. This option is especially useful if using the batch mode of
execution so that the terminal is not tied up by program output. If no
error log is specified, diagnostic messages will appear in the
scrolling window or, if in batch mode, on the \fBburst\fP program\(cqs
standard error output.
.SS "Histogram File"
.sp
The \fBhistogram\-file\fP command generates a frequency histogram to
the named file. The file format is simply one number per line; each
number is a count of critical components hit by an individual
burst ray. This file can easily be post\-processed to display a
histogram, for instance, how many rays hit zero, one, two,
three, etc. components.
.SH "SEE ALSO"
.sp
\fBburst_point_library\fP(5),
\fBburst_shotline_files\fP(5)
.SH "AUTHOR"
.sp
BRL\-CAD Team
.SH "COPYRIGHT"
.sp
This software is Copyright (c) 1989\-2021 by the United States
Government as represented by U.S. Army Research Laboratory.
.SH "BUG REPORTS"
.sp
Reports of bugs or problems should be submitted via electronic mail to
.MTO "devs\(atbrlcad.org" "" ""