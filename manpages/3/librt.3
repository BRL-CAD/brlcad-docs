'\" t
.\"     Title: librt
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2021-07-14
.\"    Manual: BRL-CAD
.\"    Source: BRL-CAD
.\"  Language: English
.\"
.TH "LIBRT" "3" "2021-07-14" "BRL\-CAD" "BRL\-CAD"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
librt \- library for raytracing an MGED database
.SH "SYNOPSIS"
.sp
This file seems to be out of date with the sources. Consult the
headers for up\-to\-date information. Use the below interface
documentation at your own discretion.
.sp
.if n .RS 4
.nf
#include "vmath.h"
#include "raytrace.h"

extern struct rt_functab OBJ[];
extern struct rt_g rt_g;

struct rt_i *rt_dirbuild (char * mged_file_name,
                          char * buf,
                          int len);
.fi
.if n .RE
.SH "DESCRIPTION"
.sp
\fIrt_dirbuild\fP opens \f(CRmged_file_name\fP and builds a directory for quick
lookup of objects. \fIrt_dirbuild\fP returns a pointer to a \fIstruct rt_i\fP
on success (often called "rtip"), or \fIRTI_NULL\fP on failure (such as
being unable to open the named database). This pointer must be saved,
as it is a required parameter to \f(CRrt_gettree\fP. The user\-supplied
buffer \fIbuf\fP is filled with up to \f(CRlen\fP characters of information from
the first title record in the database. If it is desired for "air"
objects to be reported as "hits" during ray\-tracing, then the \fIuseair\fP
member of the \fIstruct rt_i\fP must be set before the first call to
\f(CRrt_gettree\fP.
.sp
All objects (groups and regions) which are to be included in the
description to be raytraced must be preprocessed with \f(CRrt_gettree\fP,
which returns \-1 for failure and 0 for success. This function can be
called as many times as required. Be certain to pass the \fIstruct rt_i\fP
pointer from \fIrt_dirbuild\fP each time.
.sp
After the last \f(CRrt_gettree\fP call, \f(CRrt_prep\fP can be called to complete
the preparation of internal data structures. If \f(CRrt_prep\fP is not
explicitly called, it will be indirectly invoked by the first use of
\f(CRrt_shootray\fP.
.sp
To fire a ray at the model, an \fIapplication\fP structure must be
prepared and its address passed to \f(CRrt_shootray\fP. Note that it is
mandatory that you provide values for \fIa_ray.r_pt\fP (the starting point
of the ray to be fired), \fIa_ray.r_dir\fP (a unit\-length direction
vector), \fIa_hit\fP (address of user\-supplied hit routine), \fIa_miss\fP
(address of user\-supplied miss routine), \fIa_overlap\fP (address of
user\-supplied overlap routine; may be null), \fIa_rt_i\fP (\fIstruct rt_i\fP
pointer, from \fIrt_dirbuild\fP), \fIa_onehit\fP (flag controlling stop after
first hit), \fIa_level\fP (recursion level, just for diagnostic printing),
and \fIa_resource\fP (address of \fIresource\fP structure; may be null).
.sp
To obtain a report of CPU usage for a portion or portions of your
program, frame the statements with calls to \f(CRrt_prep_timer\fP and
\f(CRrt_read_timer\fP. Each call to \f(CRrt_prep_timer\fP resets the timing
process, after which \f(CRrt_read_timer\fP can be called to get a double
which is the elapsed CPU time in seconds since \f(CRrt_prep_timer\fP was
last called. In addition, up to \f(CRlen\fP bytes of system\-specific
detailing of resource consumption is placed in the user\-supplied
buffer \f(CRbuf\fP.
.sp
\fIbu_bomb\fP can be used to exit your program with \fImsg\fP printed on the
standard error output.
.SH "WARNING"
.sp
\fILibrt\fP is designed to run in parallel on some multiprocessor
machines. On some such machines system calls must be semaphore
protected.
.sp
Dynamic memory handling in applications using \fIlibrt\fP should use the
functions provided by \fIlibbu\fP instead of the usual system runtime
library routines.  The \fIlibbu\fP versions do not return to the caller
unless they succeed.  If they fail, they call \fIbu_bomb\fP with their
last argument (str) as the parameter.  The string parameter usually
indicates the purpose of the memory being allocated.
.SH "EXIT CODE"
.sp
All truly fatal errors detected by the library use \fIbu_bomb\fP to exit
with a status of 12.
.SH "DEFINITION"
.sp
RPP \- Rectangular ParallelePiped. A region of space defined by minimum
and maximum values in X, Y, and Z. RPPs are used by \fIlibrt\fP as
bounding volumes for solids.
.SH "DISCUSSION"
.sp
You should study the structures in \fIraytrace.h\fP, in particular, the
\fIapplication\fP structure, the \fIpartition\fP structure and its component
structures to get an idea of what information is handed to/from
\f(CRrt_shootray\fP. \f(CRrt_shootray\fP may be called recursively from your
\fIa_hit\fP routine (good for doing bounced rays). If you only care about
the first object hit along the path of the ray, set the \fIa_onehit\fP
flag in the application structure before calling
\f(CRrt_shootray\fP. \f(CRrt_shootray\fP returns the return value of the
user\-supplied hit or miss function that it called.
.sp
If the ray intersects the model, the \fIa_hit\fP routine is called with a
pointer to the application structure and a pointer to a linked list of
ray partitions (\fIstruct partition\fP). Within each partition are \fIseg\fP
(solid segment) and \fIhit\fP (intersection with evaluated region)
structure pointers for the places where the ray enters and leaves this
partition of space. \fIpt_inhit.hit_dist\fP is the parametric distance at
which the ray enters the partition, and \fIpt_outhit.hit_dist\fP is the
parametric distance at which the ray leaves. Note that while the \fIhit\fP
structure contains \fIhit_point\fP and \fIhit_norm\fP elements, they are not
computed by \f(CRrt_shootray\fP. If these are needed, they can be filled in
by using the \fIRT_HIT_NORMAL\fP macro; if surface curvature information
is needed, it can be obtained by using the \fIRT_CURVE\fP macro after
\fIRT_HIT_NORMAL\fP; if only the \fIhit_point\fP is needed, it can be filled
in by using the \fIVJOIN1\fP macro (see the following example).
.sp
If the ray contains any overlaps (partitions claimed by two or more
regions) the \fIa_overlap\fP routine is called for each such partition
with pointers to the application structure, the overlap partition, two
regions, and the remaining partitions along the ray. If the
\fIa_overlap\fP member is null, \fIlibrt\fP uses a default overlap
handler. Additionally, \fIlibrt\fP provides the routine
.sp
If the ray does not intersect the model, the \fIa_miss\fP routine is
called with a pointer to the application structure.
.sp
Helpful in generating a grid of ray origins, the bounding RPP of the
model is computed by \f(CRrt_gettree\fP and is stored in \fIrtip\(->mdl_min\fP and
\fIrtip\(->mdl_max\fP.
.SH "EXAMPLE"
.sp
A program can be loaded as follows:
.sp
.if n .RS 4
.nf
$ cc \-I/usr/brlcad/include main.c /usr/brlcad/lib/librt.a \-l<system\-specific> \-lm
.fi
.if n .RE
.sp
where \fI<system\-specific>\fP indicates libraries required on a particular
architecture.  The table below indicates which system specific
libraries are necessary on a particular architecture.
.TS
allbox tab(:);
lt lt.
T{
.sp
Architecture
T}:T{
.sp
Librarie(s)
T}
T{
.sp
Alliant FX/8
T}:T{
.sp
\-lcvec \-lcommon
T}
T{
.sp
Alliant FX/2800
T}:T{
.sp
\-lcommon
T}
T{
.sp
SGI 4D
T}:T{
.sp
\-lmpc
T}
T{
.sp
Cray(X/Y)
T}:T{
.sp
\-L/lib/multi \-lu \-lio
T}
T{
.sp
Cray2
T}:T{
.sp
\-lmt
T}
T{
.sp
Encore Multi\-Max
T}:T{
.sp
\-lpp
T}
.TE
.sp
.sp
Here is a portion of a hypothetical program which uses the library:
.sp
.if n .RS 4
.nf
#include <vmath.h>
#include <raytrace.h>
int
main(int argc, char argv[])
{
  static int do_if_hit(), do_if_miss(); /* Application routines */
  register int h, v;
  int grid_sz;
  struct application ap; /* Set up for rt_shootray() */
  struct rt_i *rtip;
  /* ... */

  /* Build the directory.        */
  rtip = rt_dirbuild( argv[bu_optind++] );

  /* Load the desired portion of the model. */
  while (argv[bu_optind] != NULL)
    rt_gettree(rtip, argv[bu_optind++]);

  ap.a_hit = do_if_hit;     /* Routine for hit */
  ap.a_miss = do_if_missed; /* Routine for miss */
  ap.a_overlap = 0;
  ap.a_rt_i = rtip;
  ap.a_level = 0;
  ap.a_onehit = 0;          /* Return all objects along ray */
  ap.a_resource = 0;

  for (v = 0; v < grid_sz; ++v) /* For each scanline */
    for (h = 0; h < grid_sz; ++h) {
      /* Set up ray origin. */
      VMOVE( ap.a_ray.r_pt, get_grid(h, v));
      /* Compute ray direction. */
      VMOVE( ap.a_ray.r_dir, get_dir(h, v));
      /* Must be unit vector. */
      VUNITIZE(ap.a_ray.r_dir);
      (void)rt_shootray(&ap);
    }
   /* ... */
}

static int
do_if_hit(register struct application *ap,
          struct partition *PartHeadp)
{
  extern void put_component();
  struct curvature incurv;
  register struct partition *pp;

  for (pp = PartHeadp\->pt_forw; pp != PartHeadp;
       pp = pp\->pt_forw)  {

  /* Fill in all inhit info, but just the exit location for outhit. */
  RT_HIT_NORMAL(pp\->pt_inhit\->hit_normal, pp\->pt_inhit,
                pp\->pt_inseg\->seg_stp, &ap\->a_ray,
                pp\->pt_inflip);
  RT_CURVE(&incurv, pp\->pt_inhit, pp\->pt_inseg\->seg_stp);
  VJOIN1(pp\->pt_outhit\->hit_point, ap\->a_ray.r_pt,
         pp\->pt_outhit\->hit_dist, ap\->a_ray.r_dir);

  /* Do something based on information in partition structure
   *        such as output a shotline component data record.
   */
  put_component( pp\->pt_inhit, &incurv, pp\->pt_outhit );
  /* ... */
  }
  return 1; /* Report hit to main routine */
}

static int
do_if_missed(register struct application *ap)
{
  return 0; /* Report miss to main routine */
}
.fi
.if n .RE
.SH "SEE ALSO"
.sp
\fBmged\fP(1B), \fBrt\fP(1B).
.SH "DIAGNOSTICS"
.sp
"rt_malloc: malloc failure", if \fIlibrt\fP is unable to allocate memory
with \fImalloc\fP. "rt_???: read error", if an error or EOF occurs while
reading from the model database. "unexpected SIGFPE!" when a floating
point error occurs. (The rootfinder traps SIGFPE, but SIGFPE elsewhere
is unexpected.) "rt_shootray: zero length dir vector" when the
\fIa_ray.r_dir\fP vector is not unit length. "rt_gettree called again
after rt_prep!" when an attempt is made to add more sub\-trees to the
active model after calling \f(CRrt_prep\fP (or after firing the first
ray). "rt_prep: re\-invocation" when \f(CRrt_prep\fP is called more than
once. "rt_prep: no solids to prep" when there are no valid solids in
the model.
.sp
The LIBRT_DEBUG environment variable may be set to the hexadecimal bit
vector as described by the DEBUG_* flags listed in the raytrace.h
header.  Similarly, many LIBRT applications provide a "\-x #"
command\-line option which will take precedence over the environment
variable.
.sp
The LIBRT_V4FLIP environment variable may be set to a true or false
value to respectively force or disable endianness interpretation of v4
geometry database files.  The default behavior is to automatically
detect whether flipping the endian interpretation will help LIBRT read
a binary\-incompatible v4 geometry database file.  Setting LIBRT_V4FLIP
will override automatic detection.
.sp
The LIBRT_BOT_MINTIE environment variable may be set to the minimum
number of faces a BoT primitive must have to exercise the Triangle
Intersection Engine (TIE) raytrace evaluation.  A value less than or
equal to zero will utilize traditional BoT raytracing instead of TIE.
.SH "BUGS"
.sp
On a VAX, the rootfinder detects "hard" cases by taking a SIGFPE and
retrying with a slower but more stable algorithm. This is unfortunate.
.SH "AUTHOR"
.sp
BRL\-CAD Team
.SH "COPYRIGHT"
.sp
This software is Copyright (c) 1989\-2021 by the United States
Government as represented by U.S. Army Research Laboratory.
.SH "BUG REPORTS"
.sp
Reports of bugs or problems should be submitted via electronic mail to
.MTO "devs\(atbrlcad.org" "" ""